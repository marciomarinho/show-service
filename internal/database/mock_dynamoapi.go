// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package database

import (
	"context"

	"github.com/aws/aws-sdk-go-v2/service/dynamodb"
	mock "github.com/stretchr/testify/mock"
)

// NewMockDynamoAPI creates a new instance of MockDynamoAPI. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockDynamoAPI(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockDynamoAPI {
	mock := &MockDynamoAPI{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockDynamoAPI is an autogenerated mock type for the DynamoAPI type
type MockDynamoAPI struct {
	mock.Mock
}

type MockDynamoAPI_Expecter struct {
	mock *mock.Mock
}

func (_m *MockDynamoAPI) EXPECT() *MockDynamoAPI_Expecter {
	return &MockDynamoAPI_Expecter{mock: &_m.Mock}
}

// PutItem provides a mock function for the type MockDynamoAPI
func (_mock *MockDynamoAPI) PutItem(ctx context.Context, in *dynamodb.PutItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, in, optFns)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for PutItem")
	}

	var r0 *dynamodb.PutItemOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.PutItemInput, ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error)); ok {
		return returnFunc(ctx, in, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.PutItemInput, ...func(*dynamodb.Options)) *dynamodb.PutItemOutput); ok {
		r0 = returnFunc(ctx, in, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.PutItemOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dynamodb.PutItemInput, ...func(*dynamodb.Options)) error); ok {
		r1 = returnFunc(ctx, in, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamoAPI_PutItem_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PutItem'
type MockDynamoAPI_PutItem_Call struct {
	*mock.Call
}

// PutItem is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dynamodb.PutItemInput
//   - optFns ...func(*dynamodb.Options)
func (_e *MockDynamoAPI_Expecter) PutItem(ctx interface{}, in interface{}, optFns ...interface{}) *MockDynamoAPI_PutItem_Call {
	return &MockDynamoAPI_PutItem_Call{Call: _e.mock.On("PutItem",
		append([]interface{}{ctx, in}, optFns...)...)}
}

func (_c *MockDynamoAPI_PutItem_Call) Run(run func(ctx context.Context, in *dynamodb.PutItemInput, optFns ...func(*dynamodb.Options))) *MockDynamoAPI_PutItem_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynamodb.PutItemInput
		if args[1] != nil {
			arg1 = args[1].(*dynamodb.PutItemInput)
		}
		var arg2 []func(*dynamodb.Options)
		var variadicArgs []func(*dynamodb.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*dynamodb.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDynamoAPI_PutItem_Call) Return(putItemOutput *dynamodb.PutItemOutput, err error) *MockDynamoAPI_PutItem_Call {
	_c.Call.Return(putItemOutput, err)
	return _c
}

func (_c *MockDynamoAPI_PutItem_Call) RunAndReturn(run func(ctx context.Context, in *dynamodb.PutItemInput, optFns ...func(*dynamodb.Options)) (*dynamodb.PutItemOutput, error)) *MockDynamoAPI_PutItem_Call {
	_c.Call.Return(run)
	return _c
}

// Query provides a mock function for the type MockDynamoAPI
func (_mock *MockDynamoAPI) Query(ctx context.Context, in *dynamodb.QueryInput, optFns ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, in, optFns)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Query")
	}

	var r0 *dynamodb.QueryOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error)); ok {
		return returnFunc(ctx, in, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) *dynamodb.QueryOutput); ok {
		r0 = returnFunc(ctx, in, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.QueryOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dynamodb.QueryInput, ...func(*dynamodb.Options)) error); ok {
		r1 = returnFunc(ctx, in, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamoAPI_Query_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Query'
type MockDynamoAPI_Query_Call struct {
	*mock.Call
}

// Query is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dynamodb.QueryInput
//   - optFns ...func(*dynamodb.Options)
func (_e *MockDynamoAPI_Expecter) Query(ctx interface{}, in interface{}, optFns ...interface{}) *MockDynamoAPI_Query_Call {
	return &MockDynamoAPI_Query_Call{Call: _e.mock.On("Query",
		append([]interface{}{ctx, in}, optFns...)...)}
}

func (_c *MockDynamoAPI_Query_Call) Run(run func(ctx context.Context, in *dynamodb.QueryInput, optFns ...func(*dynamodb.Options))) *MockDynamoAPI_Query_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynamodb.QueryInput
		if args[1] != nil {
			arg1 = args[1].(*dynamodb.QueryInput)
		}
		var arg2 []func(*dynamodb.Options)
		var variadicArgs []func(*dynamodb.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*dynamodb.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDynamoAPI_Query_Call) Return(queryOutput *dynamodb.QueryOutput, err error) *MockDynamoAPI_Query_Call {
	_c.Call.Return(queryOutput, err)
	return _c
}

func (_c *MockDynamoAPI_Query_Call) RunAndReturn(run func(ctx context.Context, in *dynamodb.QueryInput, optFns ...func(*dynamodb.Options)) (*dynamodb.QueryOutput, error)) *MockDynamoAPI_Query_Call {
	_c.Call.Return(run)
	return _c
}

// Scan provides a mock function for the type MockDynamoAPI
func (_mock *MockDynamoAPI) Scan(ctx context.Context, in *dynamodb.ScanInput, optFns ...func(*dynamodb.Options)) (*dynamodb.ScanOutput, error) {
	var tmpRet mock.Arguments
	if len(optFns) > 0 {
		tmpRet = _mock.Called(ctx, in, optFns)
	} else {
		tmpRet = _mock.Called(ctx, in)
	}
	ret := tmpRet

	if len(ret) == 0 {
		panic("no return value specified for Scan")
	}

	var r0 *dynamodb.ScanOutput
	var r1 error
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.ScanInput, ...func(*dynamodb.Options)) (*dynamodb.ScanOutput, error)); ok {
		return returnFunc(ctx, in, optFns...)
	}
	if returnFunc, ok := ret.Get(0).(func(context.Context, *dynamodb.ScanInput, ...func(*dynamodb.Options)) *dynamodb.ScanOutput); ok {
		r0 = returnFunc(ctx, in, optFns...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*dynamodb.ScanOutput)
		}
	}
	if returnFunc, ok := ret.Get(1).(func(context.Context, *dynamodb.ScanInput, ...func(*dynamodb.Options)) error); ok {
		r1 = returnFunc(ctx, in, optFns...)
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockDynamoAPI_Scan_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Scan'
type MockDynamoAPI_Scan_Call struct {
	*mock.Call
}

// Scan is a helper method to define mock.On call
//   - ctx context.Context
//   - in *dynamodb.ScanInput
//   - optFns ...func(*dynamodb.Options)
func (_e *MockDynamoAPI_Expecter) Scan(ctx interface{}, in interface{}, optFns ...interface{}) *MockDynamoAPI_Scan_Call {
	return &MockDynamoAPI_Scan_Call{Call: _e.mock.On("Scan",
		append([]interface{}{ctx, in}, optFns...)...)}
}

func (_c *MockDynamoAPI_Scan_Call) Run(run func(ctx context.Context, in *dynamodb.ScanInput, optFns ...func(*dynamodb.Options))) *MockDynamoAPI_Scan_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 context.Context
		if args[0] != nil {
			arg0 = args[0].(context.Context)
		}
		var arg1 *dynamodb.ScanInput
		if args[1] != nil {
			arg1 = args[1].(*dynamodb.ScanInput)
		}
		var arg2 []func(*dynamodb.Options)
		var variadicArgs []func(*dynamodb.Options)
		if len(args) > 2 {
			variadicArgs = args[2].([]func(*dynamodb.Options))
		}
		arg2 = variadicArgs
		run(
			arg0,
			arg1,
			arg2...,
		)
	})
	return _c
}

func (_c *MockDynamoAPI_Scan_Call) Return(scanOutput *dynamodb.ScanOutput, err error) *MockDynamoAPI_Scan_Call {
	_c.Call.Return(scanOutput, err)
	return _c
}

func (_c *MockDynamoAPI_Scan_Call) RunAndReturn(run func(ctx context.Context, in *dynamodb.ScanInput, optFns ...func(*dynamodb.Options)) (*dynamodb.ScanOutput, error)) *MockDynamoAPI_Scan_Call {
	_c.Call.Return(run)
	return _c
}

// TableName provides a mock function for the type MockDynamoAPI
func (_mock *MockDynamoAPI) TableName() string {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for TableName")
	}

	var r0 string
	if returnFunc, ok := ret.Get(0).(func() string); ok {
		r0 = returnFunc()
	} else {
		r0 = ret.Get(0).(string)
	}
	return r0
}

// MockDynamoAPI_TableName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TableName'
type MockDynamoAPI_TableName_Call struct {
	*mock.Call
}

// TableName is a helper method to define mock.On call
func (_e *MockDynamoAPI_Expecter) TableName() *MockDynamoAPI_TableName_Call {
	return &MockDynamoAPI_TableName_Call{Call: _e.mock.On("TableName")}
}

func (_c *MockDynamoAPI_TableName_Call) Run(run func()) *MockDynamoAPI_TableName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockDynamoAPI_TableName_Call) Return(s string) *MockDynamoAPI_TableName_Call {
	_c.Call.Return(s)
	return _c
}

func (_c *MockDynamoAPI_TableName_Call) RunAndReturn(run func() string) *MockDynamoAPI_TableName_Call {
	_c.Call.Return(run)
	return _c
}
