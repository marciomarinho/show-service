// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package handlers

import (
	"github.com/gin-gonic/gin"
	mock "github.com/stretchr/testify/mock"
)

// NewMockShowHandler creates a new instance of MockShowHandler. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShowHandler(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShowHandler {
	mock := &MockShowHandler{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShowHandler is an autogenerated mock type for the ShowHandler type
type MockShowHandler struct {
	mock.Mock
}

type MockShowHandler_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShowHandler) EXPECT() *MockShowHandler_Expecter {
	return &MockShowHandler_Expecter{mock: &_m.Mock}
}

// GetShows provides a mock function for the type MockShowHandler
func (_mock *MockShowHandler) GetShows(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockShowHandler_GetShows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetShows'
type MockShowHandler_GetShows_Call struct {
	*mock.Call
}

// GetShows is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockShowHandler_Expecter) GetShows(c interface{}) *MockShowHandler_GetShows_Call {
	return &MockShowHandler_GetShows_Call{Call: _e.mock.On("GetShows", c)}
}

func (_c *MockShowHandler_GetShows_Call) Run(run func(c *gin.Context)) *MockShowHandler_GetShows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockShowHandler_GetShows_Call) Return() *MockShowHandler_GetShows_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockShowHandler_GetShows_Call) RunAndReturn(run func(c *gin.Context)) *MockShowHandler_GetShows_Call {
	_c.Run(run)
	return _c
}

// PostShows provides a mock function for the type MockShowHandler
func (_mock *MockShowHandler) PostShows(c *gin.Context) {
	_mock.Called(c)
	return
}

// MockShowHandler_PostShows_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PostShows'
type MockShowHandler_PostShows_Call struct {
	*mock.Call
}

// PostShows is a helper method to define mock.On call
//   - c *gin.Context
func (_e *MockShowHandler_Expecter) PostShows(c interface{}) *MockShowHandler_PostShows_Call {
	return &MockShowHandler_PostShows_Call{Call: _e.mock.On("PostShows", c)}
}

func (_c *MockShowHandler_PostShows_Call) Run(run func(c *gin.Context)) *MockShowHandler_PostShows_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 *gin.Context
		if args[0] != nil {
			arg0 = args[0].(*gin.Context)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockShowHandler_PostShows_Call) Return() *MockShowHandler_PostShows_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockShowHandler_PostShows_Call) RunAndReturn(run func(c *gin.Context)) *MockShowHandler_PostShows_Call {
	_c.Run(run)
	return _c
}
