// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package service

import (
	"github.com/marciomarinho/show-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockShowService creates a new instance of MockShowService. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShowService(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShowService {
	mock := &MockShowService{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShowService is an autogenerated mock type for the ShowService type
type MockShowService struct {
	mock.Mock
}

type MockShowService_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShowService) EXPECT() *MockShowService_Expecter {
	return &MockShowService_Expecter{mock: &_m.Mock}
}

// Create provides a mock function for the type MockShowService
func (_mock *MockShowService) Create(request domain.Request) error {
	ret := _mock.Called(request)

	if len(ret) == 0 {
		panic("no return value specified for Create")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Request) error); ok {
		r0 = returnFunc(request)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockShowService_Create_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Create'
type MockShowService_Create_Call struct {
	*mock.Call
}

// Create is a helper method to define mock.On call
//   - request domain.Request
func (_e *MockShowService_Expecter) Create(request interface{}) *MockShowService_Create_Call {
	return &MockShowService_Create_Call{Call: _e.mock.On("Create", request)}
}

func (_c *MockShowService_Create_Call) Run(run func(request domain.Request)) *MockShowService_Create_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Request
		if args[0] != nil {
			arg0 = args[0].(domain.Request)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockShowService_Create_Call) Return(err error) *MockShowService_Create_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShowService_Create_Call) RunAndReturn(run func(request domain.Request) error) *MockShowService_Create_Call {
	_c.Call.Return(run)
	return _c
}

// List provides a mock function for the type MockShowService
func (_mock *MockShowService) List() (*domain.Response, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 *domain.Response
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() (*domain.Response, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() *domain.Response); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Response)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShowService_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockShowService_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockShowService_Expecter) List() *MockShowService_List_Call {
	return &MockShowService_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockShowService_List_Call) Run(run func()) *MockShowService_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShowService_List_Call) Return(response *domain.Response, err error) *MockShowService_List_Call {
	_c.Call.Return(response, err)
	return _c
}

func (_c *MockShowService_List_Call) RunAndReturn(run func() (*domain.Response, error)) *MockShowService_List_Call {
	_c.Call.Return(run)
	return _c
}
