// Code generated by mockery; DO NOT EDIT.
// github.com/vektra/mockery
// template: testify

package repository

import (
	"github.com/marciomarinho/show-service/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// NewMockShowRepository creates a new instance of MockShowRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockShowRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockShowRepository {
	mock := &MockShowRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// MockShowRepository is an autogenerated mock type for the ShowRepository type
type MockShowRepository struct {
	mock.Mock
}

type MockShowRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockShowRepository) EXPECT() *MockShowRepository_Expecter {
	return &MockShowRepository_Expecter{mock: &_m.Mock}
}

// List provides a mock function for the type MockShowRepository
func (_mock *MockShowRepository) List() ([]domain.Show, error) {
	ret := _mock.Called()

	if len(ret) == 0 {
		panic("no return value specified for List")
	}

	var r0 []domain.Show
	var r1 error
	if returnFunc, ok := ret.Get(0).(func() ([]domain.Show, error)); ok {
		return returnFunc()
	}
	if returnFunc, ok := ret.Get(0).(func() []domain.Show); ok {
		r0 = returnFunc()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Show)
		}
	}
	if returnFunc, ok := ret.Get(1).(func() error); ok {
		r1 = returnFunc()
	} else {
		r1 = ret.Error(1)
	}
	return r0, r1
}

// MockShowRepository_List_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'List'
type MockShowRepository_List_Call struct {
	*mock.Call
}

// List is a helper method to define mock.On call
func (_e *MockShowRepository_Expecter) List() *MockShowRepository_List_Call {
	return &MockShowRepository_List_Call{Call: _e.mock.On("List")}
}

func (_c *MockShowRepository_List_Call) Run(run func()) *MockShowRepository_List_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockShowRepository_List_Call) Return(shows []domain.Show, err error) *MockShowRepository_List_Call {
	_c.Call.Return(shows, err)
	return _c
}

func (_c *MockShowRepository_List_Call) RunAndReturn(run func() ([]domain.Show, error)) *MockShowRepository_List_Call {
	_c.Call.Return(run)
	return _c
}

// Put provides a mock function for the type MockShowRepository
func (_mock *MockShowRepository) Put(s domain.Show) error {
	ret := _mock.Called(s)

	if len(ret) == 0 {
		panic("no return value specified for Put")
	}

	var r0 error
	if returnFunc, ok := ret.Get(0).(func(domain.Show) error); ok {
		r0 = returnFunc(s)
	} else {
		r0 = ret.Error(0)
	}
	return r0
}

// MockShowRepository_Put_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Put'
type MockShowRepository_Put_Call struct {
	*mock.Call
}

// Put is a helper method to define mock.On call
//   - s domain.Show
func (_e *MockShowRepository_Expecter) Put(s interface{}) *MockShowRepository_Put_Call {
	return &MockShowRepository_Put_Call{Call: _e.mock.On("Put", s)}
}

func (_c *MockShowRepository_Put_Call) Run(run func(s domain.Show)) *MockShowRepository_Put_Call {
	_c.Call.Run(func(args mock.Arguments) {
		var arg0 domain.Show
		if args[0] != nil {
			arg0 = args[0].(domain.Show)
		}
		run(
			arg0,
		)
	})
	return _c
}

func (_c *MockShowRepository_Put_Call) Return(err error) *MockShowRepository_Put_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockShowRepository_Put_Call) RunAndReturn(run func(s domain.Show) error) *MockShowRepository_Put_Call {
	_c.Call.Return(run)
	return _c
}
